version: '3.8'

services:
  # Backend API Service (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: safeguard-backend-prod
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - BLOCKCHAIN_NETWORK=${BLOCKCHAIN_NETWORK}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./blockchain:/app/blockchain
    depends_on:
      - database
    networks:
      - safeguard-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: safeguard-frontend-prod
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=${API_URL}
    depends_on:
      - backend
    networks:
      - safeguard-network
    restart: always

  # PostgreSQL Database (Production)
  database:
    image: postgres:15-alpine
    container_name: safeguard-database-prod
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - safeguard-network
    restart: always

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: safeguard-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - safeguard-network
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: safeguard-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - safeguard-network
    restart: always

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: safeguard-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - safeguard-network
    restart: always

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: safeguard-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - safeguard-network
    restart: always

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  safeguard-network:
    driver: bridge
