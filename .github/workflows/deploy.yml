name: Deploy SafeGuard AI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-aws:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to AWS EC2
      run: |
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Update system
        sudo apt-get update
        
        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker $USER
        fi
        
        # Install Docker Compose if not present
        if ! command -v docker-compose &> /dev/null; then
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
        
        # Clone repository
        if [ ! -d "AI-Powered-Fraud-Detection-System" ]; then
          git clone https://github.com/${{ github.repository }}.git
        fi
        
        cd AI-Powered-Fraud-Detection-System
        
        # Pull latest changes
        git pull origin main
        
        # Set environment variables
        export DATABASE_URL="postgresql://user:password@localhost:5432/fraud_detection"
        export SECRET_KEY="your-secret-key-here"
        export API_URL="http://your-domain.com"
        
        # Stop existing containers
        docker-compose -f docker-compose.prod.yml down || true
        
        # Build and start services
        docker-compose -f docker-compose.prod.yml up -d --build
        
        # Wait for services to be ready
        sleep 30
        
        # Health check
        curl -f http://localhost:8000/health || exit 1
        
        echo "Deployment completed successfully!"
        EOF
        
        chmod +x deploy.sh
        
        # Execute deployment on EC2
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash -s' < deploy.sh
    
    - name: Setup SSL with Let's Encrypt
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
        # Install Certbot
        sudo apt-get install -y certbot python3-certbot-nginx
        
        # Get SSL certificate
        sudo certbot --nginx -d ${{ secrets.DOMAIN_NAME }} --non-interactive --agree-tos --email ${{ secrets.EMAIL }}
        
        # Setup auto-renewal
        echo "0 12 * * * /usr/bin/certbot renew --quiet" | sudo crontab -
        EOF

  deploy-docker-hub:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Create production docker-compose
      run: |
        cat > docker-compose.prod.yml << 'EOF'
        version: '3.8'
        services:
          backend:
            image: ${{ secrets.DOCKER_USERNAME }}/safeguard-backend:latest
            ports:
              - "8000:8000"
            environment:
              - DATABASE_URL=${{ secrets.DATABASE_URL }}
              - SECRET_KEY=${{ secrets.SECRET_KEY }}
            restart: always
          
          frontend:
            image: ${{ secrets.DOCKER_USERNAME }}/safeguard-frontend:latest
            ports:
              - "3000:80"
            environment:
              - REACT_APP_API_URL=${{ secrets.API_URL }}
            restart: always
        EOF
    
    - name: Deploy with Docker Compose
      run: |
        # This would be executed on the target server
        echo "Docker Compose configuration created for production deployment"
